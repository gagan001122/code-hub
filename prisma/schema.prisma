generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  fullName String?
  password String
  userName String  @unique
  bio      String

  role      Role     @default(USER)
  createdAt DateTime @default(now())

  rooms       Room[] @relation(name: "hosting")
  memberships Room[] @relation(name: "member")

  messagesSent     Message[] @relation(name: "sender")
  messagesReceived Message[] @relation(name: "receiver")

  posts    Post[]    @relation(name: "post")
  comments Comment[] @relation(name: "comment")

  likedPosts    PostLike[]    @relation(name: "user-post-like")
  likedComments CommentLike[] @relation(name: "user-comment-like")

  followers User[] @relation(name: "peers")
  following User[] @relation(name: "peers")
}

model Room {
  id          Int       @id @default(autoincrement())
  topics      String[]
  roomName    String    @unique
  description String    @default("No Description Available!")
  hostId      Int
  host        User      @relation(fields: [hostId], references: [id], name: "hosting")
  members     User[]    @relation(name: "member")
  messages    Message[]
  createdAt   DateTime  @default(now())
}

model Message {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], name: "sender")
  receiverId Int?
  receiver   User?     @relation(fields: [receiverId], references: [id], name: "receiver")
  body       String
  roomId     Int?
  room       Room?     @relation(fields: [roomId], references: [id])
  responses  Message[] @relation(name: "thread")
  threadId   Int?
  attachment Boolean?
  responseTo Message?  @relation(fields: [threadId], references: [id], name: "thread")
  createdAt  DateTime  @default(now())
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String?
  userId     Int
  user       User       @relation(references: [id], fields: [userId], name: "post")
  attachment Boolean?
  body       String
  comments   Comment[]
  likes      PostLike[] @relation(name: "post-like")
  createdAt  DateTime   @default(now())
}

model PostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(references: [id], fields: [userId], name: "user-post-like")
  postId    Int
  post      Post     @relation(references: [id], fields: [postId], name: "post-like")
  createdAt DateTime @default(now())
}

model Comment {
  id         Int           @id @default(autoincrement())
  userId     Int
  postId     Int
  post       Post          @relation(references: [id], fields: [postId])
  user       User          @relation(references: [id], fields: [userId], name: "comment")
  body       String?
  threadId   Int?
  responses  Comment[]     @relation(name: "commentThread")
  likes      CommentLike[] @relation(name: "comment-like")
  responseTo Comment?      @relation(fields: [threadId], references: [id], name: "commentThread")
  createdAt  DateTime      @default(now())
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(references: [id], fields: [userId], name: "user-comment-like")
  commentId Int
  comment   Comment  @relation(references: [id], fields: [commentId], name: "comment-like")
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

// generator erd {
//   provider = "prisma-erd-generator"
//   theme = "forest"
// }
